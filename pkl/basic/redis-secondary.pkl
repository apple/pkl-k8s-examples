//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
import "@k8s/K8sResource.pkl"
import "@k8s/api/apps/v1/Deployment.pkl"
import "@k8s/api/core/v1/Service.pkl"

resources: Listing<K8sResource> = new {
  new Service {
    metadata {
      name = "redis-secondary"
      labels {
        ["app"] = "redis"
        ["tier"] = "backend"
        ["role"] = "secondary"
      }
    }
    spec {
      ports {
        new {
          port = 6379
        }
      }
      selector {
        ["app"] = "redis"
        ["tier"] = "backend"
        ["role"] = "secondary"
      }
    }
  }

  new Deployment {
    metadata {
      name = "redis-secondary"
    }
    spec {
      selector {
        matchLabels {
          ["app"] = "redis"
          ["role"] = "secondary"
          ["tier"] = "backend"
        }
      }
      replicas = 2
      template {
        metadata {
          labels {
            ["app"] = "redis"
            ["role"] = "secondary"
            ["tier"] = "backend"
          }
        }
        spec {
          containers {
            new {
              name = "secondary"
              image = "gcr.io/google_samples/gb-redissecondary:v1"
              resources {
                requests {
                  ["cpu"] = "100m"
                  ["memory"] = "100Mi"
                }
              }
              env {
                new {
                  name = "GET_HOSTS_FROM"
                  value = "dns"
                }
              }
              ports {
                new {
                  containerPort = 6379
                }
              }
            }
          }
        }
      }
    }
  }
}

output {
  value = resources
  renderer = (K8sResource.output.renderer as YamlRenderer) {
    isStream = true
  }
}
